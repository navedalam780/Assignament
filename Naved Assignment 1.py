# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dgxa4_MBOArUw8MhJVN3RxhoxnsWnHVm
"""

# Integer
# a=1

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Float
# b=2.2

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# String
name = "Naved"
print(name)             # Output: Alice
print(name[0])          # Output: A (pehle character ko access karna)
print(name[1:3])        # Output: li (slicing)

# # Strings immutable hain, lekin naye value assign kiya ja sakta hai:
# name = "Bob"            # puri string change ho gayi
# print(name)             # Output: Bob

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Boolean (bool): Stores True or False values, typically used for conditional checks.
is_active = True
print(is_active)        # Output: True

if is_active:
    print("Active hai!")    # Output: Active hai!

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# List: Stores a sequence of items that can be of any data type, allowing duplicates. Lists are mutable, so they can be modified after creation.
# Lists ko indexing aur slicing ke through access kar sakte hain aur inhe modify bhi kar sakte hain:

numbers = [1, 2, 3, 4, 5]
print(numbers[0])           # Output: 1 (pehle element ko access karna)

numbers[1] = 10             # doosre element ko modify kiya
print(numbers)              # Output: [1, 10, 3, 4, 5]

numbers.append(6)           # list mein ek naya element add karna
print(numbers)              # Output: [1, 10, 3, 4, 5, 6]

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Tuple: Similar to lists but immutable, meaning the elements cannot be changed after creation.
# Tuples immutable hote hain, yaani inhe modify nahi kiya ja sakta. Bas access kar sakte hain:

coordinates = (10, 20)
print(coordinates[0])       # Output: 10

# # Error aayegi agar modification ki koshish ki jaaye:

# # coordinates[0] = 15       # Error


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Dictionary: Stores key-value pairs, where each key is unique. Useful for mapping relationships between data. We have to apply "," for saprating two attributes

# person = {
#     "name": "Alice",
#     "age": 25
#     }

# Dictionary mein keys ka use karke values ko access aur modify kar sakte hain:

person = {"name": "Alice", "age": 25}
print(person["name"])        # Output: Alice

person["age"] = 26           # age ko update karna
print(person)                # Output: {'name': 'Alice', 'age': 26}

person["location"] = "NY"    # nayi key-value pair add karna
print(person)                # Output: {'name': 'Alice', 'age': 26, 'location': 'NY'}


# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Set (set): Stores a collection of unique, unordered items, without duplicates.
# Sets mein elements ko directly access nahi kar sakte, lekin in operator se check kar sakte hain:

unique_numbers = {1, 2, 3}
print(2 in unique_numbers)   # Output: True

unique_numbers.add(4)        # ek naya element add karna
print(unique_numbers)        # Output: {1, 2, 3, 4}

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# NoneType (None): Represents the absence of a value, used to initialize variables that don't have a value yet.
# None ka use generally initialization ya conditions mein kiya jaata hai:

result = None
print(result)                # Output: None

if result is None:
    print("Result abhi set nahi hua.")    # Output: Result abhi set nahi hua.

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

